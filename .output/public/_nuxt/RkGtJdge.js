import{G as C,y as p,H as b,I as y,J as O,K as B,L as H,M,N as R,O as _,P as N,n as E,Q as S,R as z}from"./BtqrO9Ir.js";function K(e){return Array.isArray(e)?e:[e]}const j=e=>e==="defer"||e===!1;function F(...e){var m;const n=typeof e[e.length-1]=="string"?e.pop():void 0;typeof e[0]!="string"&&e.unshift(n);let[t,u,a={}]=e;if(typeof t!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof u!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");const s=p(),v=u,g=()=>null,P=()=>s.isHydrating?s.payload.data[t]:s.static.data[t];a.server=a.server??!0,a.default=a.default??g,a.getCachedData=a.getCachedData??P,a.lazy=a.lazy??!1,a.immediate=a.immediate??!0,a.deep=a.deep??b.deep,a.dedupe=a.dedupe??"cancel";const d=()=>a.getCachedData(t,s)!=null;if(!s._asyncData[t]||!a.immediate){(m=s.payload._errors)[t]??(m[t]=null);const i=a.deep?y:O;s._asyncData[t]={data:i(a.getCachedData(t,s)??a.default()),pending:y(!d()),error:B(s.payload._errors,t),status:y("idle")}}const r={...s._asyncData[t]};r.refresh=r.execute=(i={})=>{if(s._asyncDataPromises[t]){if(j(i.dedupe??a.dedupe))return s._asyncDataPromises[t];s._asyncDataPromises[t].cancelled=!0}if((i._initial||s.isHydrating&&i._initial!==!1)&&d())return Promise.resolve(a.getCachedData(t,s));r.pending.value=!0,r.status.value="pending";const l=new Promise((c,o)=>{try{c(v(s))}catch(f){o(f)}}).then(async c=>{if(l.cancelled)return s._asyncDataPromises[t];let o=c;a.transform&&(o=await a.transform(c)),a.pick&&(o=I(o,a.pick)),s.payload.data[t]=o,r.data.value=o,r.error.value=null,r.status.value="success"}).catch(c=>{if(l.cancelled)return s._asyncDataPromises[t];r.error.value=N(c),r.data.value=E(a.default()),r.status.value="error"}).finally(()=>{l.cancelled||(r.pending.value=!1,delete s._asyncDataPromises[t])});return s._asyncDataPromises[t]=l,s._asyncDataPromises[t]},r.clear=()=>x(s,t);const D=()=>r.refresh({_initial:!0}),w=a.server!==!1&&s.payload.serverRendered;{const i=S();if(i&&!i._nuxtOnBeforeMountCbs){i._nuxtOnBeforeMountCbs=[];const o=i._nuxtOnBeforeMountCbs;H(()=>{o.forEach(f=>{f()}),o.splice(0,o.length)}),M(()=>o.splice(0,o.length))}w&&s.isHydrating&&(r.error.value||d())?(r.pending.value=!1,r.status.value=r.error.value?"error":"success"):i&&(s.payload.serverRendered&&s.isHydrating||a.lazy)&&a.immediate?i._nuxtOnBeforeMountCbs.push(D):a.immediate&&D();const l=z();if(a.watch){const o=R(a.watch,()=>r.refresh());l&&_(o)}const c=s.hook("app:data:refresh",async o=>{(!o||o.includes(t))&&await r.refresh()});l&&_(c)}const h=Promise.resolve(s._asyncDataPromises[t]).then(()=>r);return Object.assign(h,r),h}async function G(e){await new Promise(t=>C(t));const n=e?K(e):void 0;await p().hooks.callHookParallel("app:data:refresh",n)}function x(e,n){n in e.payload.data&&(e.payload.data[n]=void 0),n in e.payload._errors&&(e.payload._errors[n]=null),e._asyncData[n]&&(e._asyncData[n].data.value=void 0,e._asyncData[n].error.value=null,e._asyncData[n].pending.value=!1,e._asyncData[n].status.value="idle"),n in e._asyncDataPromises&&(e._asyncDataPromises[n].cancelled=!0,e._asyncDataPromises[n]=void 0)}function I(e,n){const t={};for(const u of n)t[u]=e[u];return t}export{G as r,F as u};
